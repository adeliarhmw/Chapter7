{
  "swagger": "2.0",
  "info": {
    "description": "Dokumentasi Swagger mengenai API User_Game",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "auth",
      "description": "Register dan Login"
    },
    {
      "name": "user_game",
      "description": "Everything about user_game",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user_game_biodata",
      "description": "Everything about user_game_biodata",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user_game_history",
      "description": "Everything about user_game_history",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": ["http"],
  "security": [
    {
      "api_key": []
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["auth"],
        "summary": "add a new user regis",
        "description": "",
        "operationId": "addUserRegister",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Regis object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Membuat User Game"
          },
          "500": {
            "description": "Failed Membuat User Game"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "add a new user login",
        "description": "",
        "operationId": "addUserLogin",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid loginUser Game"
          },
          "500": {
            "description": "Failed login User Game"
          }
        }
      }
    },
    "/get-user-game": {
      "get": {
        "tags": ["user_game"],
        "summary": "get a new user_game",
        "description": "",
        "operationId": "GetUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Invalid input user_game"
          },
          "404": {
            "description": "User Game Not Found"
          }
        }
      }
    },
    "/create-user-game": {
      "post": {
        "tags": ["user_game"],
        "summary": "add a new user_game",
        "description": "",
        "operationId": "addUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user_game object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Membuat User Game"
          },
          "500": {
            "description": "Failed Membuat User Game"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/get-user-gamebyid/{id_user}": {
      "get": {
        "tags": ["user_game"],
        "summary": "Finds User game by Id",
        "description": "",
        "operationId": "findUserGameById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Get User Game By Id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/update-user-game/{id_user}": {
      "put": {
        "tags": ["user_game"],
        "summary": "Update user game by id",
        "description": "",
        "operationId": "updateUserGamebyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update User Game",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Mengupdate User Game",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game"
              }
            }
          },
          "500": {
            "description": "Failed Mengupdate User Game"
          }
        }
      }
    },
    "/delete-user-game/{id_user}": {
      "delete": {
        "tags": ["user_game"],
        "summary": "Delete user game by id",
        "description": "",
        "operationId": "deleteUserGamebyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Delete User Game",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game"
              }
            }
          },
          "500": {
            "description": "Failed Delete User Game"
          }
        }
      }
    },
    "/get-user-game-biodata": {
      "get": {
        "tags": ["user_game_biodata"],
        "summary": "get a new user_game_biodata",
        "description": "",
        "operationId": "GetUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "valid input user_game_biodata"
          },
          "404": {
            "description": "User Game Biodata Not Found"
          }
        }
      }
    },
    "/create-user-games-biodata": {
      "post": {
        "tags": ["user_game_biodata"],
        "summary": "add a new user_game_biodata",
        "description": "",
        "operationId": "addUserGameBiodata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game_biodata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Membuat User Game Biodata"
          },
          "500": {
            "description": "Failed Membuat User Game Biodata"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/get-user-game-biodatabyid/{id_user}": {
      "get": {
        "tags": ["user_game_biodata"],
        "summary": "Finds User game biodata by Id",
        "description": "",
        "operationId": "findUserGameBiodataById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Get User Game By Id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_biodata"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/update-user-game-biodata/{id_user}": {
      "put": {
        "tags": ["user_game_biodata"],
        "summary": "Update user game biodata by id",
        "description": "",
        "operationId": "updateUserGameBiodatabyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game_biodata to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update User Game",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game_biodata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Mengupdate User Game biodata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_biodata"
              }
            }
          },
          "500": {
            "description": "Failed Mengupdate User Game Biodata"
          }
        }
      }
    },
    "/delete-user-game-biodata/{id_user}": {
      "delete": {
        "tags": ["user_game_biodata"],
        "summary": "Delete user game biodata by id",
        "description": "",
        "operationId": "deleteUserGameBiodatabyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Delete User Game",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_biodata"
              }
            }
          },
          "500": {
            "description": "Failed Delete User Game Biodata"
          }
        }
      }
    },
    "/get-user-game-history": {
      "get": {
        "tags": ["user_game_history"],
        "summary": "get a new user_game_history",
        "description": "",
        "operationId": "GetUserGameHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "valid input user_game_Histpry"
          },
          "404": {
            "description": "User Game Histpry Biodata Not Found"
          }
        }
      }
    },
    "/create-user-game-history": {
      "post": {
        "tags": ["user_game_history"],
        "summary": "add a new user_game_history",
        "description": "",
        "operationId": "addUserGameHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game_history"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Membuat User Game History"
          },
          "500": {
            "description": "Failed Membuat User Game History"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/get-user-game-historybyid/{id_user}": {
      "get": {
        "tags": ["user_game_history"],
        "summary": "Finds User game history by Id",
        "description": "",
        "operationId": "findUserGameHistoryById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Get User Game By Id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_history"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/update-user-game-history/{id_user}": {
      "put": {
        "tags": ["user_game_history"],
        "summary": "Update user game history by id",
        "description": "",
        "operationId": "updateUserGameHistorybyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game_history to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update User Game history",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_game_history"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Mengupdate User Game history",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_history"
              }
            }
          },
          "500": {
            "description": "Failed Mengupdate User Game Biodata"
          }
        }
      }
    },
    "/delete-user-game-history/{id_user}": {
      "delete": {
        "tags": ["user_game_history"],
        "summary": "Delete user game history by id",
        "description": "",
        "operationId": "deleteUserGameHistorybyId",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Delete User Game history",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_game_history"
              }
            }
          },
          "500": {
            "description": "Failed Delete User Game History"
          }
        }
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "/pet/findByTags": {
        "get": {
          "tags": ["pet"],
          "summary": "Finds Pets by tags",
          "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "produces": ["application/xml", "application/json"],
          "parameters": [
            {
              "name": "tags",
              "in": "query",
              "description": "Tags to filter by",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            },
            "400": {
              "description": "Invalid tag value"
            }
          },
          "security": [
            {
              "petstore_auth": ["write:pets", "read:pets"]
            }
          ],
          "deprecated": true
        }
      },

      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "deprecated": true
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Login": {
      "type": "object",
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string",
          "example": "adeliarhm"
        },
        "password": {
          "type": "string",
          "example": "12345"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "user_game": {
      "type": "object",
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string",
          "example": "adeliarhm"
        },
        "password": {
          "type": "string",
          "example": "12345"
        }
      }
    }
  },
  "user_game_biodata": {
    "type": "object",
    "required": ["name_user", "email", "gender", "id_user"],
    "properties": {
      "name_user": {
        "type": "string",
        "example": "adelia rahmawati"
      },
      "email": {
        "type": "string",
        "example": "adeliarhmwt@gmail.com"
      },
      "gender": {
        "type": "string",
        "example": "Perempuan"
      },
      "id_user": {
        "type": "string",
        "example": "2"
      }
    }
  },
  "user_game_biodata_history": {
    "type": "object",
    "required": ["game_tittle", "score", "level", "id_user"],
    "properties": {
      "game_tittle": {
        "type": "string",
        "example": "candy crush"
      },
      "score": {
        "type": "string",
        "example": "1244356"
      },
      "level": {
        "type": "string",
        "example": "98"
      },
      "id_user": {
        "type": "string",
        "example": "2"
      }
    }
  },
  "ApiResponse": {
    "type": "object",
    "properties": {
      "code": {
        "type": "integer",
        "format": "int32"
      },
      "type": {
        "type": "string"
      },
      "message": {
        "type": "string"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
